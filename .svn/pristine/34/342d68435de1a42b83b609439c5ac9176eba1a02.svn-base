using System;
using System.Web.UI;
//Custom using namespace
using DevExpress.Web;
using Microsoft.ApplicationBlocks.Data;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using HicomIOS.ClassUtil;
using System.Collections;
using System.Linq;
using System.Web;
using System.Web.Services;

namespace HicomIOS.Master
{
    public partial class StockCard : MasterDetailPage
    {
        public class StockCardData
        {
            public object transaction_date { get; set; }
            public string datepickerFrom { get; set; }
            public string datepickerTo { get; set; }
            public string product_no { get; set; }
            public int product_id { get; set; }
            public string product_name { get; set; }
            public string product_type { get; set; }
            public int product_cat { get; set; }
            public int shelf { get; set; }
            public string no_ { get; set; }
            public string name_ { get; set; }
            public string cat_name { get; set; }
            public string remark { get; set; }
            public int in_ { get; set; }
            public int out_ { get; set; }
            public int adj_ { get; set; }
            public int stock_balance { get; set; }
        }
        List<StockCardData> stockCardData
        {
            get
            {
                if (Session["SESSION_STOCK_CARD"] == null)
                    Session["SESSION_STOCK_CARD"] = new List<StockCardData>();
                return (List<StockCardData>)Session["SESSION_STOCK_CARD"];
            }
            set
            {
                Session["SESSION_STOCK_CARD"] = value;
            }
        }
        public override string PageName { get { return "Stock Movement"; } }
        public override FilterBag FilterBag { get { return SPlanetUtil.ObjectFilter; } }
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!Page.IsPostBack)
            {
                // Get Permission and if no permission, will redirect to another page.
                if (!Permission.GetPermission())
                    Response.Redirect(ConstantClass.CONSTANT_NO_PERMISSION_PAGE);

                PrepareData();
                ClearWoringSession();
            }
            else
            {
                BindDataGrid();
            }
        }
        private void BindDataGrid()
        {
            gridView.DataSource = (from t in stockCardData select t).ToList();
            gridView.DataBind();
        }
        protected void ClearWoringSession()
        {
            Session.Remove("SESSION_STOCK_CARD");
        }
        protected void PrepareData()
        {
            try
            {
                if (!Page.IsPostBack)
                {
                    var dtSource = new DataTable();
                    dtSource.Columns.Add("data_value", typeof(string));
                    dtSource.Columns.Add("data_text", typeof(string));
                    dtSource.Rows.Add("PP", "Product");
                    dtSource.Rows.Add("SP", "SparePart");
                    cbbProductType.DataSource = dtSource;
                    cbbProductType.DataBind();
                }
                //SPlanetUtil.BindASPxComboBox(ref cbbProduct, DataListUtil.DropdownStoreProcedureName.Product);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public override IEnumerable<FilterControlColumn> GetFilterColumns()
        {
            var result = new ArrayList();
            return result.OfType<FilterControlColumn>();
        }

        public override void OnFilterChanged()
        {
            //BindGrid();
        }
        [WebMethod]
        public static void ChangedData()
        {
            HttpContext.Current.Session.Remove("SESSION_STOCK_CARD");
        }
        [WebMethod]
        public static string GetViewGrid(StockCardData[] dataStockCard)
        {
            var result = "";
            var stockCardData = new List<StockCardData>();
            var data = (from t in dataStockCard select t).FirstOrDefault();
            if (data != null)
            {
                try
                {
                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        //Create array of Parameters
                        List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                             new SqlParameter("@product_name", SqlDbType.VarChar,200) { Value = data.product_name.Trim() },
                             new SqlParameter("@date_from", SqlDbType.VarChar,20) { Value = data.datepickerFrom },
                             new SqlParameter("@date_to", SqlDbType.VarChar,20) { Value = data.datepickerTo },
                             new SqlParameter("@product_type", SqlDbType.VarChar,3) { Value = data.product_type },
                             new SqlParameter("@shelf", SqlDbType.Int) { Value = data.shelf },
                             new SqlParameter("@product_cat", SqlDbType.Int) { Value = data.product_cat },
                             new SqlParameter("@product_no", SqlDbType.VarChar,50) { Value = data.product_no.Trim() },
                        };
                        conn.Open();
                        var dsDatastockCard = SqlHelper.ExecuteDataset(conn, "sp_stock_card_report", arrParm.ToArray());

                        if (dsDatastockCard.Tables[0].Rows.Count > 0)
                        {
                            var productNo = "";
                            foreach (var row in dsDatastockCard.Tables[0].AsEnumerable())
                            {
                                if (!productNo.Equals(Convert.ToString(row["no_"])))
                                {
                                    productNo = Convert.ToString(row["no_"]);

                                    //  Add previous balance
                                    var in_ = Convert.IsDBNull(row["in_"]) ? 0 : Convert.ToInt32(row["in_"]);
                                    var out_ = Convert.IsDBNull(row["out_"]) ? 0 : Convert.ToInt32(row["out_"]);
                                    var adj_ = Convert.IsDBNull(row["adj_"]) ? 0 : Convert.ToInt32(row["adj_"]);
                                    var balance = Convert.IsDBNull(row["stock_balance"]) ? 0 : Convert.ToInt32(row["stock_balance"]);
                                    var totalBalance = balance - in_ + out_ + adj_;
                                    stockCardData.Add(new StockCardData()
                                    {
                                        transaction_date = "",
                                        no_ = Convert.IsDBNull(row["no_"]) ? string.Empty : Convert.ToString(row["no_"]),
                                        name_ = Convert.IsDBNull(row["name_"]) ? string.Empty : Convert.ToString(row["name_"]),
                                        remark = "Previous Balance",
                                        in_ = 0,
                                        out_ = 0,
                                        adj_ = 0,
                                        cat_name = Convert.IsDBNull(row["cat_name_tha"]) ? string.Empty : Convert.ToString(row["cat_name_tha"]),
                                        stock_balance = totalBalance,
                                    });
                                }
                                stockCardData.Add(new StockCardData()
                                {
                                    transaction_date = "",
                                    no_ = Convert.ToString(row["transaction_date"]),
                                    name_ = Convert.IsDBNull(row["remark"]) ? string.Empty : Convert.ToString(row["remark"]),
                                    remark = Convert.IsDBNull(row["customer_name"]) ? string.Empty : Convert.ToString(row["customer_name"]),
                                    in_ = Convert.IsDBNull(row["in_"]) ? 0 : Convert.ToInt32(row["in_"]),
                                    out_ = Convert.IsDBNull(row["out_"]) ? 0 : Convert.ToInt32(row["out_"]),
                                    adj_ = Convert.IsDBNull(row["adj_"]) ? 0 : Convert.ToInt32(row["adj_"]),
                                    cat_name = "",
                                    stock_balance = Convert.IsDBNull(row["stock_balance"]) ? 0 : Convert.ToInt32(row["stock_balance"]),
                                });
                            }
                        }
                    }

                    HttpContext.Current.Session["SESSION_STOCK_CARD"] = stockCardData;
                    if (stockCardData.Count < 0)
                    {
                        result = "error";
                    }
                }

                catch (Exception ex)
                {
                    throw ex;
                }
            }
            return result;

        }
        protected void gridStockCard_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {
            gridView.DataSource = (from t in stockCardData select t).ToList();
            gridView.DataBind();
        }

        protected void gridView_HtmlDataCellPrepared(object sender, ASPxGridViewTableDataCellEventArgs e)
        {
            var t = stockCardData[e.VisibleIndex];
            if (t.remark.Equals("Previous Balance"))
            {
                e.Cell.BackColor = System.Drawing.Color.Yellow;
            }
            else
            {
                e.Cell.BackColor = System.Drawing.Color.White;
            }
        }

        protected void cbbProductCat_Callback(object sender, CallbackEventArgsBase e)
        {
            var productType = e.Parameter.ToString();
            cbbProductCat_RetreiveDataIntoCombo(productType);
        }
        private void cbbProductCat_RetreiveDataIntoCombo(string productType)
        {
            using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
            {
                List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                            new SqlParameter("@lang_id", SqlDbType.VarChar,3) { Value = "tha" },
                            new SqlParameter("@cat_type", SqlDbType.Int) { Value = productType },
                        };
                conn.Open();
                var dsResult = SqlHelper.ExecuteDataset(conn, "sp_dropdown_product_category_export", arrParm.ToArray());
                conn.Close();
                cbbProductCat.DataSource = dsResult;
                cbbProductCat.TextField = "data_text";
                cbbProductCat.ValueField = "data_value";
                cbbProductCat.DataBind();
            }
        }

        //protected void cbbProduct_Callback(object sender, CallbackEventArgsBase e)
        //{
        //    var productTtype = e.Parameter.ToString();
        //    try
        //    {
        //        if (productTtype == "PP")
        //        {
        //            using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
        //            {
        //                List<SqlParameter> arrParm = new List<SqlParameter>
        //            {
        //                new SqlParameter("@lang_id", SqlDbType.VarChar,3) { Value = ""},
        //            };
        //                conn.Open();
        //                var dsResult = SqlHelper.ExecuteDataset(conn, "sp_dropdown_product_stock_card", arrParm.ToArray());
        //                conn.Close();
        //                if (dsResult.Tables.Count > 0)
        //                {
        //                    if (dsResult.Tables[0].Rows.Count > 0)
        //                    {
        //                        cbbProduct.DataSource = dsResult;
        //                        cbbProduct.TextField = "data_text";
        //                        cbbProduct.ValueField = "data_value";
        //                        //cbbProduct.SelectedIndex = "All";
        //                        cbbProduct.DataBind();
        //                    }
        //                }
        //            }
        //        }
        //        else if (productTtype == "SP")
        //        {
        //            using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
        //            {
        //                List<SqlParameter> arrParm = new List<SqlParameter>
        //            {
        //                new SqlParameter("@lang_id", SqlDbType.VarChar,3) { Value = ""},
        //            };
        //                conn.Open();
        //                var dsResult = SqlHelper.ExecuteDataset(conn, "sp_dropdown_product_spare_part", arrParm.ToArray());
        //                conn.Close();
        //                if (dsResult.Tables.Count > 0)
        //                {
        //                    if (dsResult.Tables[0].Rows.Count > 0)
        //                    {
        //                        cbbProduct.DataSource = dsResult;
        //                        cbbProduct.TextField = "data_text";
        //                        cbbProduct.ValueField = "data_value";
        //                        cbbProduct.DataBind();
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}
        protected void cbbShelf_Callback(object sender, CallbackEventArgsBase e)
        {
            using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
            {
                List<SqlParameter> arrParm = new List<SqlParameter>
                    {
                        new SqlParameter("@lang_id", SqlDbType.VarChar,3) { Value = ""},
                    };
                conn.Open();
                var dsResult = SqlHelper.ExecuteDataset(conn, "sp_dropdown_shelf", arrParm.ToArray());
                conn.Close();
                cbbShelf.DataSource = dsResult;
                cbbShelf.TextField = "data_text";
                cbbShelf.ValueField = "data_value";
                cbbShelf.DataBind();
            }
        }
    }

}

