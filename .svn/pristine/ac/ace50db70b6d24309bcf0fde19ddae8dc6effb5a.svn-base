using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

using DevExpress.Web;
using HicomIOS.ClassUtil;
using Excel = Microsoft.Office.Interop.Excel;
using Microsoft.ApplicationBlocks.Data;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Web.Services;
using System.IO;
using OfficeOpenXml;

namespace HicomIOS.Master
{
    public partial class AnnualServiceList : MasterDetailPage
    {
        public int dataId = 0;
        public override string PageName { get { return "AnnualServiceList"; } }
        public override FilterBag FilterBag { get { return SPlanetUtil.ObjectFilter; } }
        public override void OnFilterChanged()
        {

        }
        public override IEnumerable<FilterControlColumn> GetFilterColumns()
        {
            var result = new ArrayList();
            return result.OfType<FilterControlColumn>();
        }
        public class AnnualServiceListData
        {
            public string datepickerFrom { get; set; }
            public string datepickerTo { get; set; }
            public string starttingdateFrom { get; set; }
            public string starttingdateTo { get; set; }
            public string scheduleFrom { get; set; }
            public string scheduleTo { get; set; }


            public string expiredateFrom { get; set; }
            public string expiredateTo { get; set; }
            public string customer { get; set; }
            public int id { get; set; }
            public string mfg { get; set; }
            public decimal service_fee { get; set; }
            public string project { get; set; }
            public string start_date { get; set; }
            public string starting_date { get; set; }
            public string expire_date { get; set; }

            public string schedule_date { get; set; }
        }
        List<AnnualServiceListData> annualServiceListData
        {
            get
            {
                if (Session["SESSION_ANNUALSERVICELIST_DATA"] == null)
                    Session["SESSION_ANNUALSERVICELIST_DATA"] = new List<AnnualServiceListData>();
                return (List<AnnualServiceListData>)Session["SESSION_ANNUALSERVICELIST_DATA"];
            }
            set
            {
                Session["SESSION_ANNUALSERVICELIST_DATA"] = value;
            }
        }

        [WebMethod]
        public static void GetViewGrid(AnnualServiceListData[] masterData)
        {
            var dsData = new DataSet();
            var AnnualServiceListData = new List<AnnualServiceListData>();
            var datalist = (from t in masterData select t).FirstOrDefault();
            if (datalist != null)
            {
                try
                {
                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        //Create array of Parameters
                        List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                        new SqlParameter("@start_up_date_from", SqlDbType.VarChar,200) { Value = datalist.datepickerFrom },
                        new SqlParameter("@start_up_date_to", SqlDbType.VarChar,200) { Value = datalist.datepickerTo  },
                        new SqlParameter("@starting_date_from", SqlDbType.VarChar,200) { Value = datalist.starttingdateFrom },
                        new SqlParameter("@starting_date_to", SqlDbType.VarChar, 200) { Value = datalist.starttingdateTo },
                        new SqlParameter("@expire_date_from", SqlDbType.VarChar,200) { Value = datalist.expiredateFrom },
                        new SqlParameter("@expire_date_to", SqlDbType.VarChar, 200) { Value = datalist.expiredateTo },
                        new SqlParameter("@schedule_date_from", SqlDbType.VarChar,200) { Value = datalist.scheduleFrom },
                        new SqlParameter("@schedule_date_to", SqlDbType.VarChar, 200) { Value = datalist.scheduleTo },


                        };
                        conn.Open();
                        dsData = SqlHelper.ExecuteDataset(conn, "sp_annual_service_list", arrParm.ToArray());

                        if (dsData.Tables[0].Rows.Count > 0)
                        {
                            foreach (var row in dsData.Tables[0].AsEnumerable())
                            {
                                AnnualServiceListData.Add(new AnnualServiceListData()
                                {

                                    id = Convert.ToInt32(row["customer_id"]),
                                    mfg = Convert.IsDBNull(row["mfg"]) ? string.Empty : Convert.ToString(row["mfg"]),
                                    start_date = Convert.IsDBNull(row["start_up_date"]) ? string.Empty : Convert.ToString(row["start_up_date"]),
                                    project = Convert.IsDBNull(row["project"]) ? string.Empty : Convert.ToString(row["project"]),
                                    service_fee = Convert.IsDBNull(row["service_fee"]) ? 0 : Convert.ToDecimal(row["service_fee"]),
                                    starting_date = Convert.IsDBNull(row["starting_date"]) ? string.Empty : Convert.ToString(row["starting_date"]),
                                    expire_date = Convert.IsDBNull(row["expire_date"]) ? string.Empty : Convert.ToString(row["expire_date"]),
                                    schedule_date = Convert.IsDBNull(row["schedule_date"]) ? string.Empty : Convert.ToString(row["schedule_date"]),
                                    customer = Convert.IsDBNull(row["cust_name"]) ? string.Empty : Convert.ToString(row["cust_name"]),

                                });
                            }
                        }
                    }
                    HttpContext.Current.Session["SESSION_ANNUALSERVICELIST_DATA"] = AnnualServiceListData;
                }

                catch (Exception ex)
                {
                    throw ex;
                }
            }


        }

        protected void gridAnnualServiceList_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {
            gridAnnualServiceList.DataSource = (from t in annualServiceListData select t).ToList();
            gridAnnualServiceList.DataBind();
        }
        
        private enum Column_AnnualServiceList
        {
            COUNT_CALL = 1,
          
            CUSTOMER_NAME = 2,
            SCHEDULE_DATE = 3,
            MFG = 4,
            TEST_RUN_DATE = 5,
            STARTING_DATE = 6,
            EXPIRE_DATE = 7,
            
        }

        [WebMethod]
        public static string ExportAnnualServiceList(AnnualServiceListData[] annualServiceListData)
        {
            string strDownloadUrl = string.Empty;

            try
            {
                string strTemplatePath = "/Master/Template/";
                string baseUrl = string.Empty;
                String strExcelPath = string.Empty;
                string strSummaryQUTemplateFile = "AnnualService-Template.xlsx";
                int intStartRow = 5;
                DataSet dsResult;


                string excelTemplate = Path.Combine(HttpContext.Current.Server.MapPath(strTemplatePath), strSummaryQUTemplateFile);
                FileInfo templateFile = new FileInfo(excelTemplate);
                ExcelPackage excel = new ExcelPackage(templateFile);
                var templateSheet = excel.Workbook.Worksheets["Sheet1"];
                var workSheet = excel.Workbook.Worksheets.Copy("Sheet1", "SummaryQU");
                workSheet.DeleteRow(5, 1048576 - 5);
                var data = (from t in annualServiceListData select t).FirstOrDefault();
                using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                {
                    //Create array of Parameters
                    List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                        new SqlParameter("@start_up_date_from", SqlDbType.VarChar,200) { Value = data.datepickerFrom },
                        new SqlParameter("@start_up_date_to", SqlDbType.VarChar,200) { Value = data.datepickerTo  },
                        new SqlParameter("@starting_date_from", SqlDbType.VarChar,200) { Value = data.starttingdateFrom },
                        new SqlParameter("@starting_date_to", SqlDbType.VarChar, 200) { Value = data.starttingdateTo },
                        new SqlParameter("@expire_date_from", SqlDbType.VarChar,200) { Value = data.expiredateFrom },
                        new SqlParameter("@expire_date_to", SqlDbType.VarChar, 200) { Value = data.expiredateTo },
                        new SqlParameter("@schedule_date_from", SqlDbType.VarChar,200) { Value = data.scheduleFrom },
                        new SqlParameter("@schedule_date_to", SqlDbType.VarChar, 200) { Value = data.scheduleTo },

                        };
                    conn.Open();
                    dsResult = SqlHelper.ExecuteDataset(conn, "sp_annual_service_list", arrParm.ToArray());
                    var i = 0;
                    foreach (DataRow row in dsResult.Tables[0].Rows)
                    {
                        i++;
                        templateSheet.SelectedRange["A5:XFA5"].Copy(workSheet.SelectedRange[intStartRow, 1]);
                       

                        workSheet.Cells[intStartRow, (int)Column_AnnualServiceList.COUNT_CALL].Value = i - 1;
                        workSheet.Cells[intStartRow, (int)Column_AnnualServiceList.CUSTOMER_NAME].Value = row["cust_name"].ToString();
                        workSheet.Cells[intStartRow, (int)Column_AnnualServiceList.SCHEDULE_DATE].Value = row["schedule_date"].ToString();
                        workSheet.Cells[intStartRow, (int)Column_AnnualServiceList.MFG].Value = row["mfg"].ToString();
                        workSheet.Cells[intStartRow, (int)Column_AnnualServiceList.TEST_RUN_DATE].Value = row["test_run_date"].ToString();
                        workSheet.Cells[intStartRow, (int)Column_AnnualServiceList.CUSTOMER_NAME].Value = row["customer_name"].ToString();
                        workSheet.Cells[intStartRow, (int)Column_AnnualServiceList.STARTING_DATE].Value = row["starting_date"].ToString();
                        workSheet.Cells[intStartRow, (int)Column_AnnualServiceList.EXPIRE_DATE].Value = row["expire_date"].ToString();
                      
                        intStartRow++;
                    }
                }

                templateSheet = excel.Workbook.Worksheets["Sheet1"];
                excel.Workbook.Worksheets.Delete(templateSheet);
                //strDownloadUrl = baseUrl + strTemplatePath + strProductTemplateFile;
                string pathTemp = Path.GetTempFileName();
                excel.SaveAs(new FileInfo(pathTemp));

                strDownloadUrl = string.Format("LocalPath={0}&FileName={1}", pathTemp, "SummaryQuotation.xlsx");

            }


            catch (Exception ex)
            {
                string strErrorMsg = SPlanetUtil.LogErrorCollect(ex);
            }
            return strDownloadUrl;
        }
    }
}