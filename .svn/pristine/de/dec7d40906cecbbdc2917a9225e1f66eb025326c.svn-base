using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Excel = Microsoft.Office.Interop.Excel;
using Microsoft.ApplicationBlocks.Data;
using System.Data;
using System.Data.SqlClient;
using System.Web.Services;
using DevExpress.Web;
using HicomIOS.ClassUtil;  
using System.Collections;

namespace HicomIOS.Master
{
    public partial class ExportSummaryQuotationDesign : MasterDetailPage
    {
        public class SummaryQuotationDesignData
        {
            public int customer_id { get; set; }
            public int cat_id { get; set; }
            public int employee_id { get; set; }
            public int customer_group { get; set; }
            public string quotation_status { get; set; }
            public string quotation_date_from { get; set; }
            public string quotation_date_to { get; set; }
            public string quotation_no { get; set; }
            public int id { get; set; }
            public string customer_name { get; set; }
            public string model_list_air_compressor { get; set; }
            public string model_list_air_presure { get; set; }
            public string model_list_air_dryer { get; set; }
            public string model_list_line_filter { get; set; }
            public int amount_po { get; set; }
            public string project_name { get; set; }
            public string issue_date { get; set; }
            public string po_date_from { get; set; }
            public string po_date_to { get; set; }
            public string other { get; set; }
        }
        List<SummaryQuotationDesignData> summaryQuotationDesignData
        {
            get
            {
                if (Session["SESSION_EXPORT_SUMMARY_QUOTATION_DESIGN"] == null)
                    Session["SESSION_EXPORT_SUMMARY_QUOTATION_DESIGN"] = new List<SummaryQuotationDesignData>();
                return (List<SummaryQuotationDesignData>)Session["SESSION_EXPORT_SUMMARY_QUOTATION_DESIGN"];
            }
            set
            {
                Session["SESSION_EXPORT_SUMMARY_QUOTATION_DESIGN"] = value;
            }
        }

        private static string baseUrl;
        private static Excel.Workbook MyBook = null;
        private static Excel.Application MyApp = null;
        private static Excel.Worksheet MySheet = null;


        public override string PageName { get { return "SummaryQuotationDesign"; } }
        public override FilterBag FilterBag { get { return SPlanetUtil.ObjectFilter; } }
        public override IEnumerable<FilterControlColumn> GetFilterColumns()
        {
            var result = new ArrayList();
            return result.OfType<FilterControlColumn>();
        }

        public override void OnFilterChanged()
        {
            //BindGrid();
        }
        protected void Page_Load(object sender, EventArgs e)
        {
            baseUrl = SPlanetUtil.GetBaseURL(Page.Request);
            if (!Page.IsPostBack)
            {
                PrepareData();
                ClearWoringSession();
            }
            else
            {

                //BindGrid(false);
            }
        }
        protected void ClearWoringSession()
        {
            Session.Remove("SESSION_EXPORT_SUMMARY_QUOTATION_DESIGN");
        }
        protected void PrepareData()
        {
            try
            {
                if (!Page.IsPostBack)
                {
                   
                    SPlanetUtil.BindASPxComboBox(ref cbbEmployee, DataListUtil.DropdownStoreProcedureName.Employee_List);
                    SPlanetUtil.BindASPxComboBox(ref cbbCustomerGroup, DataListUtil.DropdownStoreProcedureName.Customer_Group);
                    
                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        //Create array of Parameters
                        List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                            new SqlParameter("@type", SqlDbType.VarChar,2) { Value = "D" },
                        };
                        conn.Open();
                        var dsResult = SqlHelper.ExecuteDataset(conn, "sp_dropdown_quotation_type", arrParm.ToArray());

                        conn.Close();
                        cbbQuotation.DataSource = dsResult;
                        cbbQuotation.TextField = "data_text";
                        cbbQuotation.ValueField = "data_value";
                        cbbQuotation.DataBind();

                    }

                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        //Create array of Parameters
                        List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                            new SqlParameter("@search_name", SqlDbType.VarChar,200) { Value = "" },
                            new SqlParameter("@id", SqlDbType.Int) { Value = 0 },
                        };
                        conn.Open();
                        var dsResult = SqlHelper.ExecuteDataset(conn, "sp_customer_list", arrParm.ToArray());

                        conn.Close();
                        cbbCustomer.DataSource = dsResult;
                        cbbCustomer.TextField = "code_name";
                        cbbCustomer.ValueField = "id";
                        cbbCustomer.DataBind();

                    }



                    var dtSource = new DataTable();
                    dtSource.Columns.Add("data_value", typeof(string));
                    dtSource.Columns.Add("data_text", typeof(string));
                    dtSource.Rows.Add("FL", "Follow");
                    dtSource.Rows.Add("CF", "Confirm");
                    dtSource.Rows.Add("PO", "PO");
                    dtSource.Rows.Add("DL", "Delivery");
                    dtSource.Rows.Add("CP", "Completed");
                    dtSource.Rows.Add("LS", "Lose");
                    cbbStatus.DataSource = dtSource;
                    cbbStatus.DataBind();
                }


            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #region "QUOTATION SUMMARY PRODCUT REPORT"
        private enum Column_QuotationSummary_Product
        {
            COUNT_CALL = 1,
            QUOTATION_NO = 2,
            ISSUE_DD = 3,
            ISSUE_MM = 4,
            ISSUE_YY = 5,
            CUSTOMER_NAME = 6,
            PROJECT_NAME = 7,
            DESCRIPTION = 8,
            MODEL = 9,
            SALES = 10,
            PRICE_LIST = 11,
            DISCOUNT = 12,
            FINAL_PRICE = 13,
            CONTACT_PERSON = 14,
            DETAIL_STATUS = 15,
            DETAIL_DD = 16,
            DETAIL_MM = 17,
            DETAIL_YY = 18,
            PO_NO = 19,
            AMOUNT_PO = 20,
            INVOICE = 21,
            STATUS = 22,
            TEL = 23,
            FAX = 24,
            EMAIL = 25,
            REMARK = 26,
            
        }

        [WebMethod]
        public static string Export_Quotation_Summary_Design(SummaryQuotationDesignData[] dataSummaryQuotationDesign)
        {
            var strDownloadUrl = "";
            string strTemplateFile = "Template_QuotationSummaryReport-Design.xlsx";
            int intStartRow = 5;
            DataSet dsResult;

            try
            {
                // Open Excel Application
                MyApp = new Excel.Application();
                MyApp.Visible = false;
                var strTemplatePath = "/Report/Template/"; ;
                var strExcelPath = HttpContext.Current.Server.MapPath(strTemplatePath);
                MyBook = MyApp.Workbooks.Open(strExcelPath + strTemplateFile);
                MySheet = (Excel.Worksheet)MyBook.Sheets[1];  // Explicit cast is not required here
                                                              //int intStartRow = MySheet.Cells.SpecialCells(Excel.XlCellType.xlCellTypeLastCell).Row;
                var data = (from t in dataSummaryQuotationDesign select t).FirstOrDefault();
                if (data != null)
                {
                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        //Create array of Parameters
                        List<SqlParameter> arrParm = new List<SqlParameter>
                    {
                        new SqlParameter("@customer_id", SqlDbType.Int) { Value = Convert.ToInt32(data.customer_id) },
                        new SqlParameter("@customer_group", SqlDbType.Int) { Value = Convert.ToInt32(data.customer_group) },
                        new SqlParameter("@employee_id", SqlDbType.Int) { Value = Convert.ToInt32(data.employee_id) },
                        new SqlParameter("@quotation_status", SqlDbType.VarChar, 2) { Value = data.quotation_status },
                        new SqlParameter("@quotation_date_from", SqlDbType.VarChar, 20) { Value = data.quotation_date_from },
                        new SqlParameter("@quotation_date_to", SqlDbType.VarChar, 20) { Value = data.quotation_date_to },
                        new SqlParameter("@po_date_from", SqlDbType.VarChar, 20) { Value = data.po_date_from },
                        new SqlParameter("@po_date_to", SqlDbType.VarChar, 20) { Value = data.po_date_to },
                        new SqlParameter("@quotation_no", SqlDbType.VarChar, 20) { Value = data.quotation_no },
                        new SqlParameter("@other", SqlDbType.VarChar,200) { Value = data.other },
                           
                    
                  //quotation_no: quotation_no,
                  //other: other,

                    };
                        conn.Open();
                        dsResult = SqlHelper.ExecuteDataset(conn, "sp_report_quotation_summary_design", arrParm.ToArray());
                        var i = 2;
                        foreach (DataRow row in dsResult.Tables[0].Rows)
                        {
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.COUNT_CALL] = i - 1;
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.QUOTATION_NO] = row["quotation_no"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.ISSUE_DD] = row["issue_stock_date_dd"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.ISSUE_MM] = row["issue_stock_date_mm"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.ISSUE_YY] = row["issue_stock_date_yy"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.CUSTOMER_NAME] = row["customer_name"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.PROJECT_NAME] = row["project_name"].ToString();
                            //MySheet.Cells[intStartRow, Column_QuotationSummary_Product.DESCRIPTION] = row["province_name"].ToString();
                            //MySheet.Cells[intStartRow, Column_QuotationSummary_Product.MODEL] = row["customer_address"].ToString();
                            //MySheet.Cells[intStartRow, Column_QuotationSummary_Product.SALES] = row["model_list_air_compressor"].ToString();
                            //MySheet.Cells[intStartRow, Column_QuotationSummary_Product.PRICE_LIST] = row["model_list_air_compressor_pressure"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.DISCOUNT] = row["total_discount"].ToString();
                           // MySheet.Cells[intStartRow, Column_QuotationSummary_Product.FINAL_PRICE] = row["model_list_air_dryer"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.CONTACT_PERSON] = row["contact_name"].ToString();
                           // MySheet.Cells[intStartRow, Column_QuotationSummary_Product.DETAIL_STATUS] = row["model_list_line_filter"].ToString();
                            //MySheet.Cells[intStartRow, Column_QuotationSummary_Product.DETAIL_DD] = row["model_list_line_filter_qty"].ToString();
                            //MySheet.Cells[intStartRow, Column_QuotationSummary_Product.DETAIL_MM] = row["model_list_mist_filter"].ToString();
                            //MySheet.Cells[intStartRow, Column_QuotationSummary_Product.DETAIL_YY] = row["model_list_mist_filter_qty"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.PO_NO] = row["po_no"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.AMOUNT_PO] = row["amount_po"].ToString();
                            //MySheet.Cells[intStartRow, Column_QuotationSummary_Product.INVOICE] = row["model_list_other"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.STATUS] = "";
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.TEL] = row["customer_tel"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.FAX] = row["customer_fax"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.EMAIL] = row["customer_email"].ToString();
                            MySheet.Cells[intStartRow, Column_QuotationSummary_Product.REMARK] = row["remark"].ToString();

                            intStartRow++; i++;
                        }
                    }
                }
                if (System.IO.File.Exists(strExcelPath + "Temp_quotation_summary_product.xlsx"))
                    System.IO.File.Delete(strExcelPath + "Temp_quotation_summary_product.xlsx");
                MyBook.SaveAs(strExcelPath + "Temp_quotation_summary_product.xlsx");
                MyApp.Quit();
                MyApp = null;

                strDownloadUrl = baseUrl + strTemplatePath + "Temp_quotation_summary_product.xlsx";

            }
            catch (Exception ex)
            {
                string strErrorMsg = SPlanetUtil.LogErrorCollect(ex);
            }
            return strDownloadUrl;
        }
        #endregion

        [WebMethod]
        public static void GetViewGrid(SummaryQuotationDesignData[] dataSummaryQuotationDesign)
        {
            var dsData = new DataSet();
            var summaryQuotationDesignData = new List<SummaryQuotationDesignData>();
            var data = (from t in dataSummaryQuotationDesign select t).FirstOrDefault();
            if (data != null)
            {
                try
                {
                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        //Create array of Parameters
                        List<SqlParameter> arrParm = new List<SqlParameter>
                        {

                        
                        new SqlParameter("@customer_id", SqlDbType.Int) { Value = Convert.ToInt32(data.customer_id) },
                        new SqlParameter("@customer_group", SqlDbType.Int) { Value = Convert.ToInt32(data.customer_group) },
                        new SqlParameter("@employee_id", SqlDbType.Int) { Value = Convert.ToInt32(data.employee_id) },
                        new SqlParameter("@quotation_status", SqlDbType.VarChar, 2) { Value = data.quotation_status },
                        new SqlParameter("@quotation_date_from", SqlDbType.VarChar, 20) { Value = data.quotation_date_from },
                        new SqlParameter("@quotation_date_to", SqlDbType.VarChar, 20) { Value = data.quotation_date_to },
                        new SqlParameter("@po_date_from", SqlDbType.VarChar, 20) { Value = data.po_date_from },
                        new SqlParameter("@po_date_to", SqlDbType.VarChar, 20) { Value = data.po_date_to },
                        new SqlParameter("@quotation_no", SqlDbType.VarChar, 20) { Value = data.quotation_no },
                        new SqlParameter("@other", SqlDbType.VarChar,200) { Value = data.other },

                        };
                        conn.Open();
                        dsData = SqlHelper.ExecuteDataset(conn, "sp_report_quotation_summary_design", arrParm.ToArray());

                        if (dsData.Tables[0].Rows.Count > 0)
                        {
                            foreach (var row in dsData.Tables[0].AsEnumerable())
                            {
                                summaryQuotationDesignData.Add(new SummaryQuotationDesignData()
                                {
                                     id = Convert.ToInt32(row["id"]),
                                     quotation_no = Convert.IsDBNull(row["quotation_no"]) ? string.Empty : Convert.ToString(row["quotation_no"]),
                                     issue_date = Convert.IsDBNull(row["issue_stock_date"]) ? string.Empty : Convert.ToString(row["issue_stock_date"]),
                                     customer_name = Convert.IsDBNull(row["customer_name"]) ? string.Empty : Convert.ToString(row["customer_name"]),
                                     project_name = Convert.IsDBNull(row["project_name"]) ? string.Empty : Convert.ToString(row["project_name"]),
                                   
                                     amount_po  = Convert.IsDBNull(row["amount_po"]) ? 0 : Convert.ToInt32(row["amount_po"]),
                                });
                            }
                        }
                    }
                    HttpContext.Current.Session["SESSION_EXPORT_SUMMARY_QUOTATION_PRODUCT"] = summaryQuotationDesignData;
                }

                catch (Exception ex)
                {
                    throw ex;
                }
            }
            
        }
        protected void gridExportSummaryQuotationProduct_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {
            gridView.DataSource = (from t in summaryQuotationDesignData select t).ToList();
            gridView.DataBind();
        }

    }
}