using DevExpress.Web;
using HicomIOS.ClassUtil;
using Microsoft.ApplicationBlocks.Data;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Globalization;
using System.Web;
using System.Web.Services;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace HicomIOS.Master
{
    public partial class AnnualService : MasterDetailPage
    {
        public int dataId = 0;
        public override string PageName { get { return "Annual Service"; } }
        public override FilterBag FilterBag { get { return SPlanetUtil.ObjectFilter; } }
        public class CustomerMFGList
        {
            public string model { get; set; }
            public string mfg { get; set; }
            public int customer_id { get; set; }
            public int unitwarraty { get; set; }
            public int airendwarraty { get; set; }
            public int customer_mfg_id { get; set; }

        }
        public class AnnualServiceList
        {
            public string starting_date { get; set; }
            public string settingdate { get; set; }

            public string type_name { get; set; }
            public string expire_date { get; set; }
            public string setting_date { get; set; }
            public int type_of_contract_id { get; set; }
            public int customer_id { get; set; }
            public int service_master_id { get; set; }
            public int customer_mfg_id { get; set; }



        }
        public class AnnualServiceDetail
        {
            public string checking_date { get; set; }
            public int checking_status { get; set; }
            public string checking_remark { get; set; }
            public int id { get; set; }
            public int service_master_id { get; set; }
            public string status_name { get; set; }
            public bool is_deleted { get; set; }


        }
        public class AnnualServiceFile
        {
            public string description { get; set; }
            public string file_name { get; set; }
            public int id { get; set; }

        }

        List<AnnualServiceFile> annualServiceFile
        {
            get
            {
                if (Session["SESSION_ANNUALSERVICE_FILE"] == null)
                    Session["SESSION_ANNUALSERVICE_FILE"] = new List<AnnualServiceFile>();
                return (List<AnnualServiceFile>)Session["SESSION_ANNUALSERVICE_FILE"];
            }
            set
            {
                Session["SESSION_ANNUALSERVICE_FILE"] = value;
            }
        }
        List<CustomerMFGList> CustomerMFGData
        {
            get
            {
                if (Session["SESSION_ANNUALSERVICE_CUSTOMERMFG_DETAIL"] == null)
                    Session["SESSION_ANNUALSERVICE_CUSTOMERMFG_DETAIL"] = new List<CustomerMFGList>();
                return (List<CustomerMFGList>)Session["SESSION_ANNUALSERVICE_CUSTOMERMFG_DETAIL"];
            }
            set
            {
                Session["SESSION_ANNUALSERVICE_CUSTOMERMFG_DETAIL"] = value;
            }
        }
        List<AnnualServiceList> annualServiceList
        {
            get
            {
                if (Session["SESSION_ANNUALSERVICE_LIST"] == null)
                    Session["SESSION_ANNUALSERVICE_LIST"] = new List<AnnualServiceList>();
                return (List<AnnualServiceList>)Session["SESSION_ANNUALSERVICE_LIST"];
            }
            set
            {
                Session["SESSION_ANNUALSERVICE_LIST"] = value;
            }
        }
        List<AnnualServiceDetail> annualServiceDetail
        {
            get
            {
                if (Session["SESSION_ANNUALSERVICE_DETAIL"] == null)
                    Session["SESSION_ANNUALSERVICE_DETAIL"] = new List<AnnualServiceDetail>();
                return (List<AnnualServiceDetail>)Session["SESSION_ANNUALSERVICE_DETAIL"];
            }
            set
            {
                Session["SESSION_ANNUALSERVICE_DETAIL"] = value;
            }
        }
        protected void Page_Load(object sender, EventArgs e)
        {
            dataId = Convert.ToInt32(Request.QueryString["dataId"]);
            if (!Page.IsPostBack)
            {
                ClearWorkingSession();
                PrepareData();
                LoadData();
            }
            else
            {

            }
        }
        protected void PrepareData()
        {
            try
            {
                //var dtSource = new DataTable();
                //dtSource.Columns.Add("data_value", typeof(string));
                //dtSource.Columns.Add("data_text", typeof(string));
                //dtSource.Rows.Add("P", "Product");
                //dtSource.Rows.Add("S", "SparePart");
                //cbbProductType.DataSource = dtSource;
                //cbbProductType.DataBind();

                SPlanetUtil.BindASPxComboBox(ref cbbCustomerMFG, DataListUtil.DropdownStoreProcedureName.Customer_MFG);
                SPlanetUtil.BindASPxComboBox(ref cboTypeContract, DataListUtil.DropdownStoreProcedureName.Type_Contract);
            }

            catch (Exception ex)
            {
                throw ex;
            }
        }
        protected void LoadData()
        {
            try
            {
                if (dataId > 0)
                {
                    var data = new DataSet();
                    var customerMFGData = (List<CustomerMFGList>)HttpContext.Current.Session["SESSION_ANNUALSERVICE_CUSTOMERMFG_DETAIL"];


                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                            new SqlParameter("@customer_id", SqlDbType.Int) { Value = Convert.ToInt32(dataId) },
                        };
                        conn.Open();
                        data = SqlHelper.ExecuteDataset(conn, "sp_customer_mfg_list", arrParm.ToArray());


                        if (data.Tables.Count > 0)
                        {
                            customerMFGData = new List<CustomerMFGList>();
                            var result = (from t in data.Tables[0].AsEnumerable() select t).ToList();
                            foreach (var row in result)
                            {
                                customerMFGData.Add(new CustomerMFGList()
                                {
                                    customer_id = Convert.IsDBNull(row["customer_id"]) ? 0 : Convert.ToInt32(row["customer_id"]),
                                    customer_mfg_id = Convert.IsDBNull(row["id"]) ? 0 : Convert.ToInt32(row["id"]),
                                    unitwarraty = Convert.IsDBNull(row["unitwarraty"]) ? 0 : Convert.ToInt32(row["unitwarraty"]),
                                    airendwarraty = Convert.IsDBNull(row["airendwarraty"]) ? 0 : Convert.ToInt32(row["airendwarraty"]),
                                    model = Convert.IsDBNull(row["model"]) ? string.Empty : Convert.ToString(row["model"]),
                                    mfg = Convert.IsDBNull(row["mfg"]) ? string.Empty : Convert.ToString(row["mfg"]),
                                });
                            }
                        }
                    }
                    cbbCustomerMFG.Value = dataId.ToString(); // value ต้องเป็น string น่าจะ อันนี้ไม่รุ้ว่ามันไม่ฉลาดพอ convert เอง
                    HttpContext.Current.Session["SESSION_ANNUALSERVICE_CUSTOMERMFG_DETAIL"] = customerMFGData;
                    BindGridViewCustomerMFG();
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        protected void ClearWorkingSession()
        {
            Session.Remove("SESSION_ANNUALSERVICE_CUSTOMERMFG_DETAIL");
            Session.Remove("SESSION_ANNUALSERVICE_DETAIL");
            Session.Remove("SESSION_ANNUALSERVICE_LIST");
            Session.Remove("SESSION_ANNUALSERVICE_FILE");
        }
        public override IEnumerable<FilterControlColumn> GetFilterColumns()
        {
            var result = new ArrayList();
            return result.OfType<FilterControlColumn>();
        }

        public override void OnFilterChanged()
        {
            //BindGrid();
        }


        [WebMethod]
        public static void GetMFGData(string id)
        {

            var data = new DataSet();
            var customerMFGData = (List<CustomerMFGList>)HttpContext.Current.Session["SESSION_ANNUALSERVICE_CUSTOMERMFG_DETAIL"];


            using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
            {
                List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                            new SqlParameter("@customer_id", SqlDbType.Int) { Value = Convert.ToInt32(id) },
                        };
                conn.Open();
                data = SqlHelper.ExecuteDataset(conn, "sp_customer_mfg_list", arrParm.ToArray());


                if (data.Tables.Count > 0)
                {
                    customerMFGData = new List<CustomerMFGList>();
                    var result = (from t in data.Tables[0].AsEnumerable() select t).ToList();
                    foreach (var row in result)
                    {
                        customerMFGData.Add(new CustomerMFGList()
                        {
                            customer_id = Convert.IsDBNull(row["customer_id"]) ? 0 : Convert.ToInt32(row["customer_id"]),
                            customer_mfg_id = Convert.IsDBNull(row["id"]) ? 0 : Convert.ToInt32(row["id"]),
                            unitwarraty = Convert.IsDBNull(row["unitwarraty"]) ? 0 : Convert.ToInt32(row["unitwarraty"]),
                            airendwarraty = Convert.IsDBNull(row["airendwarraty"]) ? 0 : Convert.ToInt32(row["airendwarraty"]),
                            model = Convert.IsDBNull(row["model"]) ? string.Empty : Convert.ToString(row["model"]),
                            mfg = Convert.IsDBNull(row["mfg"]) ? string.Empty : Convert.ToString(row["mfg"]),
                        });
                    }
                }
            }
            HttpContext.Current.Session["SESSION_ANNUALSERVICE_CUSTOMERMFG_DETAIL"] = customerMFGData;
        }
        private void BindGridViewCustomerMFG()
        {
            gridViewCustomerMFG.DataSource = (from t in CustomerMFGData select t).ToList();
            gridViewCustomerMFG.DataBind();
        }
        protected void gridViewCustomerMFG_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {
            //gridViewCustomerMFG.DataSource = (from t in CustomerMFGData select t).ToList();
            //gridViewCustomerMFG.DataBind();
            BindGridViewCustomerMFG();
        }

        [WebMethod]
        public static AnnualServiceList GetDetailItem(string customer_id, string customer_mfg_id)
        {
            var annualServiceList = new AnnualServiceList();
            var annualServiceDetail = new List<AnnualServiceDetail>();
            var annualServiceFile = new List<AnnualServiceFile>();

            var datadb = new DataSet();
            try
            {
                using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                {
                    List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                            new SqlParameter("@customer_id", SqlDbType.Int) { Value = Convert.ToInt32(customer_id) },
                             new SqlParameter("@customer_mfg_id", SqlDbType.Int) { Value = Convert.ToInt32(customer_mfg_id) },
                        };
                    conn.Open();
                    datadb = SqlHelper.ExecuteDataset(conn, "sp_service_master_list", arrParm.ToArray());
                    if (datadb.Tables[0].Rows.Count > 0 && datadb != null)
                    {

                        var data = datadb.Tables[0].AsEnumerable().FirstOrDefault();
                        if (data != null)
                        {
                            annualServiceList.customer_id = Convert.IsDBNull(data["customer_id"]) ? 0 : Convert.ToInt32(data["customer_id"]);

                            annualServiceList.type_of_contract_id = Convert.IsDBNull(data["type_of_contract_id"]) ? 0 : Convert.ToInt32(data["type_of_contract_id"]);
                            annualServiceList.type_name = Convert.IsDBNull(data["type_name"]) ? string.Empty : Convert.ToString(data["type_name"]);
                            annualServiceList.setting_date = Convert.IsDBNull(data["setting_date"]) ? string.Empty : Convert.ToDateTime(data["setting_date"]).ToString("dd/MM/yyyy");
                            annualServiceList.starting_date = Convert.IsDBNull(data["starting_date"]) ? string.Empty : Convert.ToDateTime(data["starting_date"]).ToString("dd/MM/yyyy");
                            annualServiceList.expire_date = Convert.IsDBNull(data["expire_date"]) ? string.Empty : Convert.ToDateTime(data["expire_date"]).ToString("dd/MM/yyyy");
                            annualServiceList.service_master_id = Convert.IsDBNull(data["id"]) ? 0 : Convert.ToInt32(data["id"]);
                            annualServiceList.customer_mfg_id = Convert.IsDBNull(data["customer_mfg_id"]) ? 0 : Convert.ToInt32(data["customer_mfg_id"]);


                        }

                        var dataDetail = (from t in datadb.Tables[1].AsEnumerable() select t).ToList();
                        if (dataDetail != null)
                        {

                            foreach (var row in dataDetail)
                            {
                                annualServiceDetail.Add(new AnnualServiceDetail()
                                {
                                    id = Convert.IsDBNull(row["id"]) ? 0 : Convert.ToInt32(row["id"]),
                                    checking_status = Convert.IsDBNull(row["checking_status"]) ? 0 : Convert.ToInt32(row["checking_status"]),
                                    checking_date = Convert.IsDBNull(row["checking_date"]) ? string.Empty : Convert.ToDateTime(row["checking_date"]).ToString("dd/MM/yyyy"),
                                    checking_remark = Convert.IsDBNull(row["checking_remark"]) ? string.Empty : Convert.ToString(row["checking_remark"]),

                                });
                            }
                        }

                        var detailFile = (from t in datadb.Tables[2].AsEnumerable() select t).ToList();
                        if (detailFile != null)
                        {

                            foreach (var row in detailFile)
                            {
                                annualServiceFile.Add(new AnnualServiceFile()
                                {
                                    id = Convert.IsDBNull(row["id"]) ? 0 : Convert.ToInt32(row["id"]),
                                    description = Convert.IsDBNull(row["description"]) ? string.Empty : Convert.ToString(row["description"]),
                                    file_name = Convert.IsDBNull(row["file_name"]) ? string.Empty : Convert.ToString(row["file_name"]),

                                });
                            }
                        }


                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            HttpContext.Current.Session["SESSION_ANNUALSERVICE_LIST"] = annualServiceList;
            HttpContext.Current.Session["SESSION_ANNUALSERVICE_DETAIL"] = annualServiceDetail;
            HttpContext.Current.Session["SESSION_ANNUALSERVICE_FILE"] = annualServiceFile;
            return annualServiceList;
        }

        protected void GridViewmasterList_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {
            GridViewmasterList.DataSource = (from t in annualServiceDetail where t.is_deleted == false select t).ToList();
            GridViewmasterList.DataBind();
        }

        protected void gridFile_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {
            gridFile.DataSource = (from t in annualServiceFile select t).ToList();
            gridFile.DataBind();
        }


        //[WebMethod]
        //public static AnnualServiceList GetDetailMaster(string id)  /*แก้ไขเข้าตรวจวันที่*/
        //{
        //    var annualServiceList = new AnnualServiceList();
        //    var datadb = new DataSet();

        //    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
        //    {
        //        List<SqlParameter> arrParm = new List<SqlParameter>
        //                {
        //                    new SqlParameter("@customer_id", SqlDbType.Int) { Value = Convert.ToInt32(id) },
        //                };
        //        conn.Open();
        //        datadb = SqlHelper.ExecuteDataset(conn, "sp_service_master_list", arrParm.ToArray());
        //        if (datadb.Tables.Count > 0)
        //        {


        //            var data = datadb.Tables[0].AsEnumerable().FirstOrDefault();
        //            if (data != null)
        //            {
        //                annualServiceList.type_of_contract_id = Convert.IsDBNull(data["type_of_contract_id"]) ? 0 : Convert.ToInt32(data["type_of_contract_id"]);
        //                annualServiceList.type_name = Convert.IsDBNull(data["type_name"]) ? string.Empty : Convert.ToString(data["type_name"]);
        //                annualServiceList.setting_date = Convert.IsDBNull(data["setting_date"]) ? string.Empty : Convert.ToString(data["setting_date"]);
        //                annualServiceList.starting_date = Convert.IsDBNull(data["starting_date"]) ? string.Empty : Convert.ToString(data["starting_date"]);
        //                annualServiceList.expire_date = Convert.IsDBNull(data["expire_date"]) ? string.Empty : Convert.ToString(Convert.ToDateTime(data["expire_date"]).ToString("dd/MM/yyyy"));

        //            }




        //        }
        //    }
        //    HttpContext.Current.Session["SESSION_ANNUALSERVICE_LIST"] = annualServiceList;
        //    return annualServiceList;
        //}


        [WebMethod]
        public static void AddChecking(string id, string CheckingDate, string Remark, string service_master_id, string statusCheck)
        {
            var annualServiceDetail = (List<AnnualServiceDetail>)HttpContext.Current.Session["SESSION_ANNUALSERVICE_DETAIL"];
            var idSubmit = id == "" ? 0 : Convert.ToInt32(id);
            var master_id = id == "" ? 0 : Convert.ToInt32(service_master_id);
            var status = statusCheck == "" ? 0 : Convert.ToInt32(statusCheck);
            if (annualServiceDetail.Count > 0)
            {

                var row = (from t in annualServiceDetail
                           where t.id == idSubmit && t.is_deleted == false
                           select t).FirstOrDefault();
                if (row == null)
                {
                    annualServiceDetail.Add(new AnnualServiceDetail()
                    {
                        id = (annualServiceDetail.Count + 1) * -1,
                        checking_date = CheckingDate,
                        checking_remark = Remark,
                        checking_status = status,
                        status_name = status == 0 ? "รอการตรวจสอบ" : "ตรวจสอบแล้ว",
                        service_master_id = master_id
                    });

                }
                else
                { /*edit*/

                    row.checking_date = CheckingDate;
                    row.checking_remark = Remark;
                    row.checking_status = status;
                    row.status_name = status == 0 ? "รอการตรวจสอบ" : "ตรวจสอบแล้ว";
                    row.service_master_id = master_id;

                }
            }
            else
            {

                annualServiceDetail = new List<AnnualServiceDetail>();
                annualServiceDetail.Add(new AnnualServiceDetail()
                {
                    id = (annualServiceDetail.Count + 1) * -1,
                    checking_date = CheckingDate,
                    checking_remark = Remark,
                    checking_status = status,
                    status_name = status == 0 ? "รอการตรวจสอบ" : "ตรวจสอบแล้ว",
                    service_master_id = master_id
                });

            }
            HttpContext.Current.Session["SESSION_ANNUALSERVICE_DETAIL"] = annualServiceDetail;


        }
        [WebMethod]
        public static AnnualServiceDetail SelectEditChecking(int id)
        {
            var annualServiceDetail = (List<AnnualServiceDetail>)HttpContext.Current.Session["SESSION_ANNUALSERVICE_DETAIL"];
            if (annualServiceDetail != null)
            {
                var row = (from t in annualServiceDetail where t.id == id && t.is_deleted == false select t).FirstOrDefault();
                if (row != null)
                {
                    return row;
                }
            }
            return new AnnualServiceDetail(); // ไม่มี Data
        }


        protected void upload_FilePdfUploadComplete(object sender, FileUploadCompleteEventArgs e)
        {

            Guid guid = Guid.NewGuid();
            var fileName = String.Format("{0}_" + guid + ".pdf", ConstantClass.SESSION_USER_ID);
            string path = Page.MapPath("../Doc_pdf/") + fileName;
            string serverPath = e.CallbackData;
            bool exists = System.IO.Directory.Exists(Server.MapPath("/Doc_pdf"));

            if (!exists)
                System.IO.Directory.CreateDirectory(Server.MapPath("/Doc_pdf"));

            e.UploadedFile.SaveAs(path);

            if (annualServiceFile == null)
            {
                annualServiceFile = new List<AnnualServiceFile>();
            }
            int genId = (annualServiceFile.Count + 1) * -1;
            annualServiceFile.Add(new AnnualServiceFile()
            {
                // description = txtFileName.Value,
                file_name = fileName,
                id = genId
            });

            e.CallbackData = Convert.ToString(genId);
        }

        [WebMethod]
        public static string UpdateDescriptionFile(int id, string description)
        {
            var strReturn = string.Empty;
            var annualServiceFileList = (List<AnnualServiceFile>)HttpContext.Current.Session["SESSION_ANNUALSERVICE_FILE"];
            if (annualServiceFileList != null)
            {
                var row = (from t in annualServiceFileList where t.id == id select t).FirstOrDefault();
                if (row != null)
                {
                    row.description = description;
                }
            }
            HttpContext.Current.Session["SESSION_ANNUALSERVICE_FILE"] = annualServiceFileList;
            return strReturn;
        }

        [WebMethod]
        public static int SubmitMasterData(AnnualServiceList[] masterData)
        {
            var complete = 0;
            var dataMasterList = (from t in masterData select t).FirstOrDefault();
            using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
            {
                conn.Open();
                using (SqlTransaction tran = conn.BeginTransaction())
                {

                    if (dataMasterList != null)
                    {
                        try
                        {

                            if (dataMasterList.service_master_id <= 0)
                            {
                                //Mode Add
                                int newID = DataListUtil.emptyEntryID;
                                var issueNo = string.Empty;

                                using (SqlCommand cmd = new SqlCommand("sp_annual_service_master_add", conn, tran))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@customer_id", SqlDbType.Int).Value = Convert.ToInt32(dataMasterList.customer_id);
                                    cmd.Parameters.Add("@customer_mfg_id", SqlDbType.Int).Value = Convert.ToInt32(dataMasterList.customer_mfg_id);
                                    cmd.Parameters.Add("@type_of_contract_id", SqlDbType.Int).Value = Convert.ToInt32(dataMasterList.type_of_contract_id);
                                    cmd.Parameters.Add("@setting_date", SqlDbType.Date).Value = DateTime.ParseExact(dataMasterList.setting_date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    cmd.Parameters.Add("@starting_date", SqlDbType.Date).Value = DateTime.ParseExact(dataMasterList.starting_date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    cmd.Parameters.Add("@expire_date", SqlDbType.Date).Value = DateTime.ParseExact(dataMasterList.expire_date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    cmd.Parameters.Add("@created_by", SqlDbType.Int).Value = Convert.ToInt32(ConstantClass.SESSION_USER_ID);

                                    newID = Convert.ToInt32(cmd.ExecuteScalar());
                                }
                                //Shedule
                                var annualServiceDetail = (List<AnnualServiceDetail>)HttpContext.Current.Session["SESSION_ANNUALSERVICE_DETAIL"];
                                if (annualServiceDetail != null)
                                {
                                    var row = (from t in annualServiceDetail where t.is_deleted == false select t).ToList();
                                    if (row != null)
                                    {

                                        foreach (var data in row)
                                        {
                                            using (SqlCommand cmd = new SqlCommand("sp_annual_service_schedule_add", conn, tran))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.Add("@service_master_id", SqlDbType.Int).Value = newID;
                                                cmd.Parameters.Add("@checking_date", SqlDbType.Date).Value = DateTime.ParseExact(data.@checking_date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                cmd.Parameters.Add("@checking_status", SqlDbType.Bit).Value = data.checking_status;
                                                cmd.Parameters.Add("@checking_remark", SqlDbType.VarChar, 100).Value = data.checking_remark;
                                                cmd.Parameters.Add("@created_by", SqlDbType.Int).Value = Convert.ToInt32(ConstantClass.SESSION_USER_ID);
                                                cmd.ExecuteNonQuery();
                                            }
                                        }
                                    }
                                }
                                //File PDF
                                var annualServiceFile = (List<AnnualServiceFile>)HttpContext.Current.Session["SESSION_ANNUALSERVICE_FILE"];
                                if (annualServiceFile != null)
                                {
                                    var rowFile = (from t in annualServiceFile select t).ToList();
                                    if (rowFile != null)
                                    {
                                        foreach (var dataFile in rowFile)
                                        {
                                            using (SqlCommand cmd = new SqlCommand("sp_annual_service_attach_file_add", conn, tran))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.Add("@service_master_id", SqlDbType.Int).Value = newID;
                                                cmd.Parameters.Add("@description", SqlDbType.VarChar, 100).Value = dataFile.file_name;
                                                cmd.Parameters.Add("@file_name", SqlDbType.VarChar, 100).Value = dataFile.file_name;
                                                cmd.Parameters.Add("@created_by", SqlDbType.Int).Value = Convert.ToInt32(ConstantClass.SESSION_USER_ID);
                                                cmd.ExecuteNonQuery();
                                            }
                                        }
                                    }
                                }

                            }
                            else  ////Edit Mode
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_annual_service_master_edit", conn, tran))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@id", SqlDbType.Int).Value = dataMasterList.service_master_id;
                                    cmd.Parameters.Add("@customer_id", SqlDbType.Int).Value = Convert.ToInt32(dataMasterList.customer_id);
                                    cmd.Parameters.Add("@customer_mfg_id", SqlDbType.Int).Value = Convert.ToInt32(dataMasterList.customer_mfg_id);
                                    cmd.Parameters.Add("@type_of_contract_id", SqlDbType.Int).Value = Convert.ToInt32(dataMasterList.type_of_contract_id);
                                    cmd.Parameters.Add("@setting_date", SqlDbType.Date).Value = DateTime.ParseExact(dataMasterList.setting_date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    cmd.Parameters.Add("@starting_date", SqlDbType.Date).Value = DateTime.ParseExact(dataMasterList.starting_date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    cmd.Parameters.Add("@expire_date", SqlDbType.Date).Value = DateTime.ParseExact(dataMasterList.expire_date, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                                    cmd.Parameters.Add("@updated_by", SqlDbType.Int).Value = Convert.ToInt32(ConstantClass.SESSION_USER_ID);

                                    cmd.ExecuteNonQuery();
                                }
                                //Shedule
                                var annualServiceDetail = (List<AnnualServiceDetail>)HttpContext.Current.Session["SESSION_ANNUALSERVICE_DETAIL"];
                                if (annualServiceDetail != null)
                                {
                                    var row = (from t in annualServiceDetail select t).ToList();
                                    if (row != null)
                                    {

                                        foreach (var data in row)
                                        {
                                            if (data.id < 0)
                                            {
                                                if (!data.is_deleted)
                                                {
                                                    using (SqlCommand cmd = new SqlCommand("sp_annual_service_schedule_add", conn, tran))
                                                    {
                                                        cmd.CommandType = CommandType.StoredProcedure;
                                                        cmd.Parameters.Add("@service_master_id", SqlDbType.Int).Value = dataMasterList.service_master_id;
                                                        cmd.Parameters.Add("@checking_date", SqlDbType.Date).Value = DateTime.ParseExact(data.@checking_date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                        cmd.Parameters.Add("@checking_status", SqlDbType.Bit).Value = data.checking_status;
                                                        cmd.Parameters.Add("@checking_remark", SqlDbType.VarChar, 100).Value = data.checking_remark;
                                                        cmd.Parameters.Add("@created_by", SqlDbType.Int).Value = Convert.ToInt32(ConstantClass.SESSION_USER_ID);
                                                        cmd.ExecuteNonQuery();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (data.is_deleted)
                                                {
                                                    
                                                        using (SqlCommand cmd = new SqlCommand("sp_annual_service_schedule_delete", conn, tran))
                                                    {
                                                        cmd.CommandType = CommandType.StoredProcedure;
                                                        cmd.Parameters.Add("@id", SqlDbType.Int).Value = data.id;
                                                        cmd.Parameters.Add("@updated_by", SqlDbType.Int).Value = Convert.ToInt32(ConstantClass.SESSION_USER_ID);
                                                        cmd.ExecuteNonQuery();
                                                    }
                                                }
                                                else
                                                {
                                                    using (SqlCommand cmd = new SqlCommand("sp_annual_service_schedule_edit", conn, tran))
                                                    {
                                                        cmd.CommandType = CommandType.StoredProcedure;
                                                        cmd.Parameters.Add("@id", SqlDbType.Int).Value = data.id;
                                                        cmd.Parameters.Add("@service_master_id", SqlDbType.Int).Value = dataMasterList.service_master_id;
                                                        cmd.Parameters.Add("@checking_date", SqlDbType.Date).Value = DateTime.ParseExact(data.@checking_date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                        cmd.Parameters.Add("@checking_status", SqlDbType.Bit).Value = data.checking_status;
                                                        cmd.Parameters.Add("@checking_remark", SqlDbType.VarChar, 100).Value = data.checking_remark;
                                                        cmd.Parameters.Add("@updated_by", SqlDbType.Int).Value = Convert.ToInt32(ConstantClass.SESSION_USER_ID);
                                                        cmd.ExecuteNonQuery();

                                                    }
                                                }

                                            }

                                        }
                                    }
                                }
                                //File PDF
                                var annualServiceFile = (List<AnnualServiceFile>)HttpContext.Current.Session["SESSION_ANNUALSERVICE_FILE"];
                                if (annualServiceFile != null)
                                {
                                    var row = (from t in annualServiceFile select t).ToList();
                                    if (row != null)
                                    {

                                        foreach (var dataFile in row)
                                        {
                                            if (dataFile.id < 0)
                                            {
                                                using (SqlCommand cmd = new SqlCommand("sp_annual_service_attach_file_add", conn, tran))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.Add("@service_master_id", SqlDbType.Int).Value = dataMasterList.service_master_id;
                                                    cmd.Parameters.Add("@description", SqlDbType.VarChar, 100).Value = dataFile.file_name;
                                                    cmd.Parameters.Add("@file_name", SqlDbType.VarChar, 100).Value = dataFile.file_name;
                                                    cmd.Parameters.Add("@created_by", SqlDbType.Int).Value = Convert.ToInt32(ConstantClass.SESSION_USER_ID);
                                                    cmd.ExecuteNonQuery();
                                                }
                                            }
                                            else
                                            {
                                                using (SqlCommand cmd = new SqlCommand("sp_annual_service_schedule_edit", conn, tran))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.Add("@id", SqlDbType.Int).Value = dataFile.id;
                                                    cmd.Parameters.Add("@service_master_id", SqlDbType.Int).Value = dataMasterList.service_master_id;
                                                    cmd.Parameters.Add("@description", SqlDbType.VarChar, 100).Value = dataFile.file_name;
                                                    cmd.Parameters.Add("@file_name", SqlDbType.VarChar, 100).Value = dataFile.file_name;
                                                    cmd.Parameters.Add("@updated_by", SqlDbType.Int).Value = Convert.ToInt32(ConstantClass.SESSION_USER_ID);
                                                    cmd.ExecuteNonQuery();

                                                }
                                            }

                                        }
                                    }
                                }
                            }

                        }
                        catch (Exception ex)
                        {

                            tran.Rollback();
                            tran.Dispose();
                            conn.Close();



                        }
                        finally
                        {
                            if (!conn.State.Equals(ConnectionState.Closed))
                            {

                                tran.Commit();
                                tran.Dispose();
                                conn.Close();

                            }
                        }
                    }
                }

            }
            complete = dataMasterList.customer_id;

            return complete;
        }


        [WebMethod]
        public static void CleaSession()
        {
            HttpContext.Current.Session.Remove("SESSION_ANNUALSERVICE_CUSTOMERMFG_DETAIL");
            HttpContext.Current.Session.Remove("SESSION_ANNUALSERVICE_DETAIL");
            HttpContext.Current.Session.Remove("SESSION_ANNUALSERVICE_LIST");
            HttpContext.Current.Session.Remove("SESSION_ANNUALSERVICE_FILE");

        }

        [WebMethod]
        public static void DeleteMasterList(string id)
        {
            try
            {
                List<AnnualServiceDetail> dataMasterList = (List<AnnualServiceDetail>)HttpContext.Current.Session["SESSION_ANNUALSERVICE_DETAIL"];

                if (dataMasterList != null)
                {
                    var selectedData = (from t in dataMasterList where t.id == Convert.ToInt32(id) && t.is_deleted == false select t).FirstOrDefault();
                    if (selectedData != null)
                    {
                        if (Convert.ToInt32(id) < 0)
                        {
                            dataMasterList.Remove(selectedData);
                        }
                        else
                        {
                            selectedData.is_deleted = true;
                        }
                    }
                }

                HttpContext.Current.Session["SESSION_ANNUALSERVICE_DETAIL"] = dataMasterList;


            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        protected void GridAnnualServiceYear_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {

        }
    }
}


