using System;
using System.Web.UI;
//Custom using namespace
using DevExpress.Web;
using Microsoft.ApplicationBlocks.Data;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using HicomIOS.ClassUtil;
using System.Collections;
using System.Linq;
using System.Web;
using System.Web.Services;
using System.Globalization;

namespace HicomIOS.Master
{
    public partial class Supplier : MasterDetailPage
    {
        private DataSet dsResult;
        private DataTable dtProvince = new DataTable();
        private DataTable dtAmphur = new DataTable();
        private DataTable dtDistrict = new DataTable();
        public class SupplierList
        {
            public int id { get; set; }
            public string supplier_code { get; set; }
            public string supplier_name_tha { get; set; }
            public string supplier_name_eng { get; set; }
            public string supplier_name_other { get; set; }
            public int supplier_group_id { get; set; }
            public int supplier_brand_id { get; set; }
            public string branch_no { get; set; }
            public string address_eng { get; set; }
            public string address_tha { get; set; }
            public int geo_id { get; set; }
            public int province_id { get; set; }
            public int amphur_id { get; set; }
            public int district_id { get; set; }
            public string zipcode { get; set; }
            public string tel { get; set; }
            public string fax { get; set; }
            public string email { get; set; }
            public string tax_id { get; set; }
            public string contact_name { get; set; }
            public string first_contact { get; set; }
            public int credit_limit { get; set; }
            public decimal financial_limit { get; set; }
            public int vat { get; set; }
            public decimal target_sale { get; set; }
            public string account_code_id { get; set; }
            public string remark { get; set; }
            public int created_by { get; set; }
            public List<ProvinceClass> provinceList { get; set; }
            public List<AmphurClass> amphurList { get; set; }
            public List<DistrictClass> districtList { get; set; }
        }

        public class ProvinceClass
        {
            public int id { get; set; }
            public string name { get; set; }
        }

        public class AmphurClass
        {
            public int id { get; set; }
            public string name { get; set; }
        }

        public class DistrictClass
        {
            public int id { get; set; }
            public string name { get; set; }
        }

        public override string PageName { get { return "Supplier"; } }
        public override FilterBag FilterBag { get { return SPlanetUtil.ObjectFilter; } }
        public override long SelectedItemID
        {
            get
            {
                var ItemID = gridView.GetRowValues(gridView.FocusedRowIndex, gridView.KeyFieldName);
                return ItemID != null ? (int)ItemID : DataListUtil.emptyEntryID;
            }
            set
            {
                gridView.FocusedRowIndex = gridView.FindVisibleIndexByKeyValue(value);
            }
        }

        // ClientInstanceName that use in Script.js
        private string strClientInstanceName_gridView;
        private string strClientInstanceName_UserControlEditForm = "";

        protected void Page_Load(object sender, EventArgs e)
        {
            // Load Combobox Thailand Geo Data
            SPlanetUtil.BindASPxComboBox(ref cboGEO, DataListUtil.DropdownStoreProcedureName.Thailand_Geo);
            cboGEO.Items.Insert(0, new ListEditItem("--โปรดเลือก--", "0"));

            SPlanetUtil.BindASPxComboBox(ref cboSupplierBrand, DataListUtil.DropdownStoreProcedureName.Supplier_Brand);
            cboSupplierBrand.Items.Insert(0, new ListEditItem("--โปรดเลือก--", "0"));

            SPlanetUtil.BindASPxComboBox(ref cboSupplierGroup, DataListUtil.DropdownStoreProcedureName.Supplier_Group);
            cboSupplierGroup.Items.Insert(0, new ListEditItem("--โปรดเลือก--", "0"));

            // Setting height gridView
            gridView.Settings.VerticalScrollableHeight = Convert.ToInt32(BasePage.SizeScreen);
            gridView.SettingsBehavior.AllowFocusedRow = true;
            if (Session["ROW"] != null)
            {
                gridView.FocusedRowIndex = Convert.ToInt32(Session["ROW"]);
            }

            //Bind Data into GridView
            if (!Page.IsPostBack)
            {
                // Get Permission and if no permission, will redirect to another page.
                if (!Permission.GetPermission())
                    Response.Redirect(ConstantClass.CONSTANT_NO_PERMISSION_PAGE);

                dsResult = null;
                BindGrid(true);
            }
            else
            {
                dsResult = (DataSet)Session["SESSION_SUPPLIER_MASTER"];
                BindGrid(false);
            }
        }

        #region "Inherited Event of Filter Control"
        public override void OnFilterChanged()
        {
            BindGrid();
        }
        public override void RefreshEntry()     //Popup Menu Select Refresh Data
        {
            BindGrid(true);
        }

        public override IEnumerable<FilterControlColumn> GetFilterColumns()
        {
            var result = new ArrayList();
            return result.OfType<FilterControlColumn>();
        }
        #endregion

        protected void BindGrid(bool isForceRefreshData = false)
        {
            try
            {
                if (!Page.IsPostBack || isForceRefreshData)
                {
                    string search = "";
                    if (Session["SEARCH"] != null)
                    {
                        search = Session["SEARCH"].ToString();
                        txtSearchBoxData.Value = search;
                    }

                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        //Create array of Parameters
                        List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                            new SqlParameter("@search_name", SqlDbType.VarChar,200) { Value = search },
                            new SqlParameter("@id", SqlDbType.Int) { Value = 0 }
                        };
                        conn.Open();
                        dsResult = SqlHelper.ExecuteDataset(conn, "sp_supplier_list", arrParm.ToArray());
                        conn.Close();
                        Session["SESSION_SUPPLIER_MASTER"] = dsResult;
                    }
                }

                //Bind data into GridView
                gridView.DataSource = dsResult;
                gridView.FilterExpression = FilterBag.GetExpression(false);
                gridView.DataBind();

                //  Check page from session
                if (Session["PAGE"] != null)
                {
                    int page = Convert.ToInt32(Session["PAGE"]);
                    gridView.PageIndex = page;
                }
                if (!Page.IsPostBack && Session["COLUMN"] != null && Session["ORDER"] != null)
                {
                    int order = Convert.ToInt32(Session["ORDER"]);
                    if (order == 1)
                    {
                        ((GridViewDataColumn)gridView.Columns[Session["COLUMN"].ToString()]).SortAscending();
                    }
                    else
                    {
                        ((GridViewDataColumn)gridView.Columns[Session["COLUMN"].ToString()]).SortDescending();
                    }
                }
            }
            catch (Exception ex)
            {
                string strErrorMsg = SPlanetUtil.LogErrorCollect(ex);
                ScriptManager.RegisterStartupScript(this, GetType(), "myalert", "alert('" + strErrorMsg + "');", true);
            }
        }

        protected void cboProvince_Callback(object source, CallbackEventArgsBase e)
        {
            FillProvinceCombo(e.Parameter);
        }
        protected void cboAmphur_Callback(object source, CallbackEventArgsBase e)
        {
            FillAmphurCombo(e.Parameter);
        }
        protected void cboDistrict_Callback(object source, CallbackEventArgsBase e)
        {
            FillDistrictCombo(e.Parameter);
        }

        protected void FillProvinceCombo(string geoId)
        {
            try
            {
                dtProvince = new DataTable();
                dtProvince.Columns.Add("data_text", typeof(string));
                dtProvince.Columns.Add("data_value", typeof(int));
                dtProvince.Columns.Add("geo_id", typeof(int));

                if (!string.IsNullOrEmpty(geoId))
                {
                    var dtSource = new DataTable();
                    dtSource.Columns.Add("data_value", typeof(int));
                    dtSource.Columns.Add("data_text", typeof(string));
                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        conn.Open();
                        using (DataSet dsResult = SqlHelper.ExecuteDataset(SPlanetUtil.GetConnectionString(), CommandType.StoredProcedure, DataListUtil.DropdownStoreProcedureName.Thailand_Province))
                        {
                            if (dsResult != null)
                            {
                                foreach (var row in dsResult.Tables[0].AsEnumerable())
                                {
                                    if (Convert.ToString(row["geo_id"]) == geoId)
                                    {
                                        dtProvince.Rows.Add(row[1], Convert.ToInt32(row[0]), Convert.ToInt32(row[2]));
                                    }
                                }
                            }

                        }
                        conn.Close();
                    }

                    var provinceFilter = (from t in dtProvince.AsEnumerable()
                                          where t.Field<int>("geo_id") == Convert.ToInt32(geoId)
                                          select t).ToList();
                    foreach (var row in provinceFilter)
                    {
                        dtSource.Rows.Add(row[1], row[0]);
                    }
                    cboProvince.DataSource = dtSource;
                    cboProvince.DataBind();
                }
            }
            catch (Exception ex)
            {
                string strErrorMsg = SPlanetUtil.LogErrorCollect(ex);
                ScriptManager.RegisterStartupScript(this, GetType(), "myalert", "alert('" + strErrorMsg + "');", true);
            }
        }
        protected void FillAmphurCombo(string provinceId)
        {
            try
            {
                dtAmphur = new DataTable();
                dtAmphur.Columns.Add("data_text", typeof(string));
                dtAmphur.Columns.Add("data_value", typeof(int));
                dtAmphur.Columns.Add("province_id", typeof(int));

                if (!string.IsNullOrEmpty(provinceId))
                {
                    var dtSource = new DataTable();
                    dtSource.Columns.Add("data_value", typeof(int));
                    dtSource.Columns.Add("data_text", typeof(string));
                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        conn.Open();
                        using (DataSet dsResult = SqlHelper.ExecuteDataset(SPlanetUtil.GetConnectionString(), CommandType.StoredProcedure, DataListUtil.DropdownStoreProcedureName.Thailand_Amphur))
                        {
                            if (dsResult != null)
                            {
                                foreach (var row in dsResult.Tables[0].AsEnumerable())
                                {
                                    if (Convert.ToString(row["province_id"]) == provinceId)
                                    {
                                        dtAmphur.Rows.Add(row[1], Convert.ToInt32(row[0]), Convert.ToInt32(row[2]));
                                    }
                                }
                            }

                        }
                        conn.Close();
                    }

                    var amphurFilter = (from t in dtAmphur.AsEnumerable()
                                        where t.Field<int>("province_id") == Convert.ToInt32(provinceId)
                                        select t).ToList();
                    foreach (var row in amphurFilter)
                    {
                        dtSource.Rows.Add(row[1], row[0]);
                    }
                    cboAmphur.DataSource = dtSource;
                    cboAmphur.DataBind();
                }
            }
            catch (Exception ex)
            {
                string strErrorMsg = SPlanetUtil.LogErrorCollect(ex);
                ScriptManager.RegisterStartupScript(this, GetType(), "myalert", "alert('" + strErrorMsg + "');", true);
            }
        }
        protected void FillDistrictCombo(string amphurId)
        {
            try
            {
                dtDistrict = new DataTable();
                dtDistrict.Columns.Add("data_text", typeof(string));
                dtDistrict.Columns.Add("data_value", typeof(int));
                dtDistrict.Columns.Add("amphur_id", typeof(int));

                if (!string.IsNullOrEmpty(amphurId))
                {
                    var dtSource = new DataTable();
                    dtSource.Columns.Add("data_value", typeof(int));
                    dtSource.Columns.Add("data_text", typeof(string));

                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        conn.Open();
                        using (DataSet dsResult = SqlHelper.ExecuteDataset(SPlanetUtil.GetConnectionString(), CommandType.StoredProcedure, DataListUtil.DropdownStoreProcedureName.Thailand_District))
                        {
                            if (dsResult != null)
                            {
                                foreach (var row in dsResult.Tables[0].AsEnumerable())
                                {
                                    if (Convert.ToString(row["amphur_id"]) == amphurId)
                                    {
                                        dtDistrict.Rows.Add(row[1], Convert.ToInt32(row[0]), Convert.ToInt32(row[2]));
                                    }
                                }
                            }

                        }
                        conn.Close();
                    }

                    var districtFilter = (from t in dtDistrict.AsEnumerable()
                                          where t.Field<int>("amphur_id") == Convert.ToInt32(amphurId)
                                          select t).ToList();
                    foreach (var row in districtFilter)
                    {
                        dtSource.Rows.Add(row[1], row[0]);
                    }
                    cboDistrict.DataSource = dtSource;
                    cboDistrict.DataBind();
                }
            }
            catch (Exception ex)
            {
                string strErrorMsg = SPlanetUtil.LogErrorCollect(ex);
                ScriptManager.RegisterStartupScript(this, GetType(), "myalert", "alert('" + strErrorMsg + "');", true);
            }
        }

        [WebMethod]
        public static string InsertSupplier(SupplierList[] supplierAddData)
        {
            var row = (from t in supplierAddData select t).FirstOrDefault();
            if (row != null)
            {
                DateTime? firstContact = null;
                if (!string.IsNullOrEmpty(row.first_contact))
                {
                    firstContact = DateTime.ParseExact(row.first_contact, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                }
                try
                {
                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        using (SqlCommand cmd = new SqlCommand("sp_supplier_add", conn))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@supplier_code", SqlDbType.VarChar, 20).Value = Convert.ToString(row.supplier_code);
                            cmd.Parameters.Add("@supplier_name_tha", SqlDbType.VarChar, 150).Value = Convert.ToString(row.supplier_name_tha);
                            cmd.Parameters.Add("@supplier_name_eng", SqlDbType.VarChar, 150).Value = Convert.ToString(row.supplier_name_eng);
                            cmd.Parameters.Add("@supplier_name_other", SqlDbType.VarChar, 150).Value = Convert.ToString(row.supplier_name_other);
                            cmd.Parameters.Add("@branch_no", SqlDbType.VarChar, 5).Value = Convert.ToString(row.branch_no);
                            cmd.Parameters.Add("@supplier_group_id", SqlDbType.Int).Value = Convert.ToInt32(row.supplier_group_id);
                            cmd.Parameters.Add("@supplier_brand_id", SqlDbType.Int).Value = Convert.ToInt32(row.supplier_brand_id);
                            cmd.Parameters.Add("@address_tha", SqlDbType.VarChar, 200).Value = Convert.ToString(row.address_tha);
                            cmd.Parameters.Add("@address_eng", SqlDbType.VarChar, 200).Value = Convert.ToString(row.address_eng);
                            cmd.Parameters.Add("@geo_id", SqlDbType.Int).Value = Convert.ToInt32(row.geo_id);
                            cmd.Parameters.Add("@province_id", SqlDbType.Int).Value = Convert.ToInt32(row.province_id);
                            cmd.Parameters.Add("@amphur_id", SqlDbType.Int).Value = Convert.ToInt32(row.amphur_id);
                            cmd.Parameters.Add("@district_id", SqlDbType.Int).Value = Convert.ToInt32(row.district_id);
                            cmd.Parameters.Add("@zipcode", SqlDbType.VarChar, 10).Value = Convert.ToString(row.zipcode);
                            cmd.Parameters.Add("@tel", SqlDbType.VarChar, 50).Value = Convert.ToString(row.tel);
                            cmd.Parameters.Add("@fax", SqlDbType.VarChar, 50).Value = Convert.ToString(row.fax);
                            cmd.Parameters.Add("@email", SqlDbType.VarChar, 50).Value = Convert.ToString(row.email);
                            cmd.Parameters.Add("@tax_id", SqlDbType.VarChar, 50).Value = Convert.ToString(row.tax_id);
                            cmd.Parameters.Add("@contact_name", SqlDbType.VarChar, 100).Value = Convert.ToString(row.contact_name);
                            cmd.Parameters.Add("@first_contact", SqlDbType.Date).Value = firstContact;
                            cmd.Parameters.Add("@credit_limit", SqlDbType.Int).Value = Convert.ToInt32(row.financial_limit);
                            cmd.Parameters.Add("@financial_limit", SqlDbType.Decimal).Value = Convert.ToDecimal(row.financial_limit);
                            cmd.Parameters.Add("@vat", SqlDbType.Int).Value = Convert.ToInt32(row.vat);
                            cmd.Parameters.Add("@target_sale", SqlDbType.Decimal).Value = Convert.ToDecimal(row.target_sale);
                            cmd.Parameters.Add("@account_code_id", SqlDbType.VarChar, 50).Value = Convert.ToString(row.account_code_id);
                            cmd.Parameters.Add("@remark", SqlDbType.VarChar, 200).Value = Convert.ToString(row.remark);
                            cmd.Parameters.Add("@created_by", SqlDbType.Int).Value = Convert.ToInt32(ConstantClass.SESSION_USER_ID);

                            conn.Open();
                            cmd.ExecuteNonQuery();
                            conn.Close();
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
            return "success";
        }

        [WebMethod]
        public static SupplierList GetEditSupplierData(string id, int index)
        {
            //  Set active row
            HttpContext.Current.Session["ROW"] = index;

            var supplierData = new SupplierList();
            var dsDataSupplier = new DataSet();
            var dsDataProvince = new DataSet();
            var dsDataAmphur = new DataSet();
            var dsDataDistrict = new DataSet();
            try
            {
                using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                {
                    List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                            new SqlParameter("@search_name", SqlDbType.VarChar,200) { Value = "" },
                            new SqlParameter("@id", SqlDbType.Int) { Value = Convert.ToInt32(id) }
                        };
                    conn.Open();
                    dsDataSupplier = SqlHelper.ExecuteDataset(conn, "sp_supplier_list", arrParm.ToArray());
                    conn.Close();

                    var geo_id = Convert.IsDBNull(dsDataSupplier.Tables[0].Rows[0]["geo_id"]) ? 0 : Convert.ToInt32(dsDataSupplier.Tables[0].Rows[0]["geo_id"]);
                    if (geo_id > 0)
                    {
                        List<SqlParameter> arrProvince = new List<SqlParameter>
                        {
                            new SqlParameter("@geo_id", SqlDbType.Int) { Value = Convert.ToInt32(geo_id) }
                        };
                        conn.Open();
                        dsDataProvince = SqlHelper.ExecuteDataset(conn, "sp_dropdrown_tb_thailand_2_province", arrProvince.ToArray());
                        conn.Close();
                    }


                    var province_id = Convert.IsDBNull(dsDataSupplier.Tables[0].Rows[0]["province_id"]) ? 0 : Convert.ToInt32(dsDataSupplier.Tables[0].Rows[0]["province_id"]);
                    if (province_id > 0)
                    {
                        List<SqlParameter> arrAmphur = new List<SqlParameter>
                        {
                            new SqlParameter("@province_id", SqlDbType.Int) { Value = Convert.ToInt32(province_id) }
                        };
                        conn.Open();
                        dsDataAmphur = SqlHelper.ExecuteDataset(conn, "sp_dropdrown_tb_thailand_3_amphur", arrAmphur.ToArray());
                        conn.Close();
                    }

                    var amphur_id = Convert.IsDBNull(dsDataSupplier.Tables[0].Rows[0]["amphur_id"]) ? 0 : Convert.ToInt32(dsDataSupplier.Tables[0].Rows[0]["amphur_id"]);
                    if (amphur_id > 0)
                    {
                        List<SqlParameter> arrDistrict = new List<SqlParameter>
                        {
                            new SqlParameter("@amphur_id", SqlDbType.Int) { Value = Convert.ToInt32(amphur_id) }
                        };
                        conn.Open();
                        dsDataDistrict = SqlHelper.ExecuteDataset(conn, "sp_dropdrown_tb_thailand_4_district", arrDistrict.ToArray());
                        conn.Close();
                    }
                }

                if (dsDataSupplier.Tables.Count > 0)
                {
                    var row = dsDataSupplier.Tables[0].Rows[0];

                    supplierData.id = Convert.IsDBNull(row["id"]) ? 0 : Convert.ToInt32(row["id"]);
                    supplierData.supplier_code = Convert.IsDBNull(row["supplier_code"]) ? null : Convert.ToString(row["supplier_code"]);
                    supplierData.supplier_name_tha = Convert.IsDBNull(row["supplier_name_tha"]) ? null : Convert.ToString(row["supplier_name_tha"]);
                    supplierData.supplier_name_eng = Convert.IsDBNull(row["supplier_name_eng"]) ? null : Convert.ToString(row["supplier_name_eng"]);
                    supplierData.supplier_name_other = Convert.IsDBNull(row["supplier_name_other"]) ? null : Convert.ToString(row["supplier_name_other"]);
                    supplierData.branch_no = Convert.IsDBNull(row["branch_no"]) ? null : Convert.ToString(row["branch_no"]);
                    supplierData.supplier_group_id = Convert.IsDBNull(row["supplier_group_id"]) ? 0 : Convert.ToInt32(row["supplier_group_id"]);
                    supplierData.supplier_brand_id = Convert.IsDBNull(row["supplier_brand_id"]) ? 0 : Convert.ToInt32(row["supplier_brand_id"]);
                    supplierData.address_tha = Convert.IsDBNull(row["address_tha"]) ? null : Convert.ToString(row["address_tha"]);
                    supplierData.address_eng = Convert.IsDBNull(row["address_eng"]) ? null : Convert.ToString(row["address_eng"]);
                    supplierData.geo_id = Convert.IsDBNull(row["geo_id"]) ? 0 : Convert.ToInt32(row["geo_id"]);
                    supplierData.province_id = Convert.IsDBNull(row["province_id"]) ? 0 : Convert.ToInt32(row["province_id"]);
                    supplierData.amphur_id = Convert.IsDBNull(row["amphur_id"]) ? 0 : Convert.ToInt32(row["amphur_id"]);
                    supplierData.district_id = Convert.IsDBNull(row["district_id"]) ? 0 : Convert.ToInt32(row["district_id"]);
                    supplierData.zipcode = Convert.IsDBNull(row["zipcode"]) ? null : Convert.ToString(row["zipcode"]);
                    supplierData.contact_name = Convert.IsDBNull(row["contact_name"]) ? null : Convert.ToString(row["contact_name"]);
                    supplierData.tel = Convert.IsDBNull(row["tel"]) ? null : Convert.ToString(row["tel"]);
                    supplierData.email = Convert.IsDBNull(row["email"]) ? null : Convert.ToString(row["email"]);
                    supplierData.fax = Convert.IsDBNull(row["fax"]) ? null : Convert.ToString(row["fax"]);
                    supplierData.tax_id = Convert.IsDBNull(row["tax_id"]) ? null : Convert.ToString(row["tax_id"]);
                    supplierData.first_contact = Convert.IsDBNull(row["first_contact"]) ? null : Convert.ToString(row["first_contact"]);
                    supplierData.credit_limit = Convert.IsDBNull(row["credit_limit"]) ? 0 : Convert.ToInt32(row["credit_limit"]);
                    supplierData.financial_limit = Convert.IsDBNull(row["financial_limit"]) ? 0 : Convert.ToDecimal(row["financial_limit"]);
                    supplierData.vat = Convert.IsDBNull(row["vat"]) ? 0 : Convert.ToInt32(row["vat"]);
                    supplierData.target_sale = Convert.IsDBNull(row["target_sale"]) ? 0 : Convert.ToDecimal(row["target_sale"]);
                    supplierData.account_code_id = Convert.IsDBNull(row["account_code_id"]) ? null : Convert.ToString(row["account_code_id"]);
                    supplierData.remark = Convert.IsDBNull(row["remark"]) ? null : Convert.ToString(row["remark"]);
                }

                supplierData.provinceList = new List<ProvinceClass>();
                if (dsDataProvince.Tables.Count > 0)
                {
                    foreach (var rowProvince in dsDataProvince.Tables[0].AsEnumerable())
                    {
                        supplierData.provinceList.Add(new ProvinceClass()
                        {
                            id = Convert.IsDBNull(rowProvince["data_value"]) ? 0 : Convert.ToInt32(rowProvince["data_value"]),
                            name = Convert.IsDBNull(rowProvince["data_text"]) ? null : Convert.ToString(rowProvince["data_text"])
                        });
                    }
                }

                supplierData.amphurList = new List<AmphurClass>();
                if (dsDataAmphur.Tables.Count > 0)
                {
                    foreach (var rowAmphur in dsDataAmphur.Tables[0].AsEnumerable())
                    {
                        supplierData.amphurList.Add(new AmphurClass()
                        {
                            id = Convert.IsDBNull(rowAmphur["data_value"]) ? 0 : Convert.ToInt32(rowAmphur["data_value"]),
                            name = Convert.IsDBNull(rowAmphur["data_text"]) ? null : Convert.ToString(rowAmphur["data_text"])
                        });
                    }
                }

                supplierData.districtList = new List<DistrictClass>();
                if (dsDataDistrict.Tables.Count > 0)
                {
                    foreach (var rowDistrict in dsDataDistrict.Tables[0].AsEnumerable())
                    {
                        supplierData.districtList.Add(new DistrictClass()
                        {
                            id = Convert.IsDBNull(rowDistrict["data_value"]) ? 0 : Convert.ToInt32(rowDistrict["data_value"]),
                            name = Convert.IsDBNull(rowDistrict["data_text"]) ? null : Convert.ToString(rowDistrict["data_text"])
                        });
                    }
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }

            return supplierData;
        }

        [WebMethod]
        public static string UpdateSupplier(SupplierList[] supplierUpdateData)
        {
            var row = (from t in supplierUpdateData select t).FirstOrDefault();
            if (row != null)
            {
                DateTime? firstContact = null;
                if (!string.IsNullOrEmpty(row.first_contact))
                {
                    firstContact = DateTime.ParseExact(row.first_contact, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                }
                try
                {
                    using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                    {
                        using (SqlCommand cmd = new SqlCommand("sp_supplier_edit", conn))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@id", SqlDbType.Int).Value = Convert.ToInt32(row.id);
                            cmd.Parameters.Add("@supplier_code", SqlDbType.VarChar, 20).Value = Convert.ToString(row.supplier_code);
                            cmd.Parameters.Add("@supplier_name_tha", SqlDbType.VarChar, 150).Value = Convert.ToString(row.supplier_name_tha);
                            cmd.Parameters.Add("@supplier_name_eng", SqlDbType.VarChar, 150).Value = Convert.ToString(row.supplier_name_eng);
                            cmd.Parameters.Add("@supplier_name_other", SqlDbType.VarChar, 150).Value = Convert.ToString(row.supplier_name_other);
                            cmd.Parameters.Add("@branch_no", SqlDbType.VarChar, 5).Value = Convert.ToString(row.branch_no);
                            cmd.Parameters.Add("@supplier_group_id", SqlDbType.Int).Value = Convert.ToInt32(row.supplier_group_id);
                            cmd.Parameters.Add("@supplier_brand_id", SqlDbType.Int).Value = Convert.ToInt32(row.supplier_brand_id);
                            cmd.Parameters.Add("@address_tha", SqlDbType.VarChar, 200).Value = Convert.ToString(row.address_tha);
                            cmd.Parameters.Add("@address_eng", SqlDbType.VarChar, 200).Value = Convert.ToString(row.address_eng);
                            cmd.Parameters.Add("@geo_id", SqlDbType.Int).Value = Convert.ToInt32(row.geo_id);
                            cmd.Parameters.Add("@province_id", SqlDbType.Int).Value = Convert.ToInt32(row.province_id);
                            cmd.Parameters.Add("@amphur_id", SqlDbType.Int).Value = Convert.ToInt32(row.amphur_id);
                            cmd.Parameters.Add("@district_id", SqlDbType.Int).Value = Convert.ToInt32(row.district_id);
                            cmd.Parameters.Add("@zipcode", SqlDbType.VarChar, 10).Value = Convert.ToString(row.zipcode);
                            cmd.Parameters.Add("@contact_name", SqlDbType.VarChar, 50).Value = Convert.ToString(row.contact_name);
                            cmd.Parameters.Add("@tel", SqlDbType.VarChar, 50).Value = Convert.ToString(row.tel);
                            cmd.Parameters.Add("@fax", SqlDbType.VarChar, 50).Value = Convert.ToString(row.fax);
                            cmd.Parameters.Add("@email", SqlDbType.VarChar, 50).Value = Convert.ToString(row.email);
                            cmd.Parameters.Add("@tax_id", SqlDbType.VarChar, 50).Value = Convert.ToString(row.tax_id);
                            cmd.Parameters.Add("@first_contact", SqlDbType.Date).Value = firstContact;
                            cmd.Parameters.Add("@credit_limit", SqlDbType.Int).Value = Convert.ToInt32(row.credit_limit);
                            cmd.Parameters.Add("@financial_limit", SqlDbType.Decimal).Value = Convert.ToDecimal(row.financial_limit);
                            cmd.Parameters.Add("@vat", SqlDbType.Int).Value = Convert.ToInt32(row.vat);
                            cmd.Parameters.Add("@target_sale", SqlDbType.Decimal).Value = Convert.ToDecimal(row.target_sale);
                            cmd.Parameters.Add("@account_code_id", SqlDbType.VarChar, 50).Value = Convert.ToString(row.account_code_id);
                            cmd.Parameters.Add("@remark", SqlDbType.VarChar, 200).Value = Convert.ToString(row.remark);

                            conn.Open();
                            cmd.ExecuteNonQuery();
                            conn.Close();
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
            return "success";
        }

        [WebMethod]
        public static string DeleteSupplier(string id)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                {
                    using (SqlCommand cmd = new SqlCommand("sp_supplier_delete", conn))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@id", SqlDbType.Int).Value = Convert.ToInt32(id);
                        cmd.Parameters.Add("@updated_by", SqlDbType.Int).Value = Convert.ToInt32(ConstantClass.SESSION_USER_ID);

                        conn.Open();
                        cmd.ExecuteNonQuery();
                        conn.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return "success";
        }

        protected void gridView_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {
            var dsResult = new DataSet();
            try
            {
                using (SqlConnection conn = new SqlConnection(SPlanetUtil.GetConnectionString()))
                {
                    //Create array of Parameters
                    List<SqlParameter> arrParm = new List<SqlParameter>
                        {
                            new SqlParameter("@search_name", SqlDbType.VarChar,200) { Value = e.Parameters.ToString() },
                            new SqlParameter("@id", SqlDbType.Int) { Value = 0 }
                        };
                    conn.Open();
                    dsResult = SqlHelper.ExecuteDataset(conn, "sp_supplier_list", arrParm.ToArray());
                    conn.Close();
                    Session["SESSION_SUPPLIER_MASTER"] = dsResult;

                    Session["SEARCH"] = e.Parameters.ToString();
                }

                //Bind data into GridView
                gridView.DataSource = dsResult;
                gridView.FilterExpression = FilterBag.GetExpression(false);
                gridView.DataBind();
            }
            catch (Exception ex)
            {
                string strErrorMsg = SPlanetUtil.LogErrorCollect(ex);
                ScriptManager.RegisterStartupScript(this, GetType(), "myalert", "alert('" + strErrorMsg + "');", true);
            }
        }

        protected void gridView_PageIndexChanged(object sender, EventArgs e)
        {
            int pageIndex = (sender as ASPxGridView).PageIndex;
            Session["PAGE"] = pageIndex;
        }

        protected void gridView_BeforeColumnSortingGrouping(object sender, ASPxGridViewBeforeColumnGroupingSortingEventArgs e)
        {
            string column = e.Column.FieldName;
            int order = Convert.ToInt32(e.Column.SortOrder);

            Session["COLUMN"] = column;
            Session["ORDER"] = order;
        }
    }
}